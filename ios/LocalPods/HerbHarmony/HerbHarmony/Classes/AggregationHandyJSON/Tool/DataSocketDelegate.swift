
//: Declare String Begin

/*: "SOCKET_ADDR_KEY" :*/
fileprivate let str_layerValue:[Character] = ["S","O","C","K","E","T","_","A","D","D","R","_","K"]
fileprivate let str_taskSumimateName:[Character] = ["E","Y"]

/*: "SOCKET_VIDEOCHAT_REQUESTCALL_NOTIFICATION" :*/
fileprivate let str_managerData:[UInt8] = [0x90,0x8c,0x80,0x88,0x86,0x97,0x9c,0x95,0x8a,0x87,0x86,0x8c,0x80,0x8b,0x82,0x97,0x9c,0x91,0x86,0x92,0x96,0x86,0x90,0x97,0x80,0x82,0x8f,0x8f,0x9c,0x8d,0x8c,0x97,0x8a,0x85,0x8a,0x80,0x82,0x97,0x8a,0x8c,0x8d]

private func sumButton(user num: UInt8) -> UInt8 {
    return num ^ 195
}

/*: "RECIVE_FLOATSCREEN_NOTIFICATION" :*/
fileprivate let str_hiddenData:[UInt8] = [0x4e,0x4f,0x49,0x54,0x41,0x43,0x49,0x46,0x49,0x54,0x4f,0x4e,0x5f,0x4e,0x45,0x45,0x52,0x43,0x53,0x54,0x41,0x4f,0x4c,0x46,0x5f,0x45,0x56,0x49,0x43,0x45,0x52]

/*: "isCalling" :*/
fileprivate let str_valueData:String = "isCallingextension extension index"

/*: "isTalking" :*/
fileprivate let str_viewName:String = "aspect manager class videoisTal"

/*: "SOCKET ËøûÊé•ÊàêÂäü." :*/
fileprivate let str_modeTopData:String = "socket"
fileprivate let str_useTitle:[Character] = [" ","Ëøû","\u{63a5}","Êàê","Âäü","."]

/*: "SOCKET ËøûÊé•Â§±Ë¥•, error: :*/
fileprivate let str_buttonValue:[Character] = ["S","O","C","K","E","T"," ","Ëøû"]
fileprivate let str_lineValue:String = "\u{63a5}Â§±Ë¥•, e"

/*: ." :*/
fileprivate let str_callTitle:String = "."

/*: "SOCKET Â§±Ë¥• :*/
fileprivate let str_pageTableText:[Character] = ["S","O","C","K","E","T"," ","Â§±","Ë¥•"]

/*: Ê¨°, ÂàáÊç¢ËøáSocketÂüüÂêçÈáçÊñ∞Â∞ùËØïÔºåÂú∞ÂùÄÔºö :*/
fileprivate let str_contentName:[Character] = ["Ê¨°",","," ","Âàá","Êç¢","Ëøá","S","o"]
fileprivate let str_makeValue:String = "half visual truecketÂüü"
fileprivate let str_priceName:[Character] = ["\u{540d}","Èáç","\u{65b0}","Â∞ù","ËØï","\u{ff0c}","Âú∞","\u{5740}","Ôºö"]

/*: "SOCKET Â∑≤ÂÖ≥Èó≠, code: :*/
fileprivate let str_voiceData:String = "fromOCK"
fileprivate let str_flagName:String = "Èó≠, coelse view"
fileprivate let str_fatalValue:[Character] = ["d","e",":"]

/*: , reason: :*/
fileprivate let str_viewValue:String = ", rearray super self self"
fileprivate let str_nearValue:[Character] = ["a","s","o","n",":"]

/*: "ws:// :*/
fileprivate let str_pathTitle:String = "ws://view need orientation line"

/*: /?sid= :*/
fileprivate let str_toName:String = "self not let/?sid="

/*: &uid= :*/
fileprivate let str_detailSectionData:String = "camera let&uid="

/*: &platform=iphone&version= :*/
fileprivate let str_modelText:String = "video index image make selected&plat"
fileprivate let str_shareValue:String = "=iphlet inside info visible view"
fileprivate let str_directionData:String = "ersion=cell string let to title"

/*: &packageId= :*/
fileprivate let str_topSharedContent:String = "in self center&packa"

/*: "1v1server. :*/
fileprivate let str_ofValue:String = "push color color block1v1se"

/*: .com:7766" :*/
fileprivate let str_toTitle:String = ".comhalf image"

/*: "43.129.185.194:7767" :*/
fileprivate let str_dataValue:[Character] = ["4","3",".","1","2","9",".","1"]
fileprivate let str_messageData:String = "85.1"

/*: "SOCKET ÁΩëÁªúreachabilityChangedÁõëÂê¨ÔºåÊñ≠ÁΩëÂÖ≥Èó≠." :*/
fileprivate let str_imageValue:[UInt8] = [0xdf,0xc3,0xcf,0xc7,0xc9,0xd8,0xac,0x6b,0x31,0x1d,0x6b,0x37,0x10,0xfe,0xe9,0xed,0xef,0xe4,0xed,0xee,0xe5,0xe0,0xe5,0xf8,0xf5,0xcf,0xe4,0xed,0xe2,0xeb,0xe9,0xe8,0x6b,0x17,0x1d,0x69,0x1c,0x20,0x63,0x30,0x0,0x6a,0x1a,0x21,0x6b,0x31,0x1d,0x69,0x9,0x3f,0x65,0x1b,0x21,0xa2]

private func callFile(again num: UInt8) -> UInt8 {
    return num ^ 140
}

/*: "cmd" :*/
fileprivate let str_viewText:[Character] = ["c","m","d"]

/*: "ping" :*/
fileprivate let str_modeTitle:[Character] = ["p","i","n","g"]

/*: "callHeartbeat" :*/
fileprivate let str_modelData:[Character] = ["c","a","l","l","H","e","a","r","t","b","e","a","t"]

/*: "recievedDate" :*/
fileprivate let str_resignText:[Character] = ["r","e","c","i","e","v","e","d"]
fileprivate let str_inputValue:String = "Datereturn button push"

/*: "liveHeartBeat" :*/
fileprivate let str_tipLabelName:[Character] = ["l","i","v","e","H","e","a","r","t","B","e","a","t"]

/*: "üîó ÂÖ≥Èó≠ socket" :*/
fileprivate let str_genderContent:String = "üîó ÂÖ≥Èó≠ "
fileprivate let str_indexText:String = "svaluecket"

/*: "The user logs out" :*/
fileprivate let str_labData:[Character] = ["T","h","e"," ","u","s","e","r"," ","l"]
fileprivate let str_dateText:String = "ogs outtype app view"

/*: "SOCKET  :*/
fileprivate let str_resultValue:[Character] = ["S","O","C","K","E","T"]
fileprivate let str_frameName:String = "from"

/*: ÈáçËøû. ÈáçËØïÊ¨°Êï∞Ôºö :*/
fileprivate let str_userData:[Character] = ["Èáç","Ëøû","."," ","Èáç","ËØï"]
fileprivate let str_messageResponseName:[Character] = ["Ê¨°","Êï∞","Ôºö"]

/*: , Âú∞ÂùÄÔºö :*/
fileprivate let str_colorValue:String = ", Âú∞ÂùÄÔºö"

/*: "SOCKET ËøûÊé•Ê≠£Â∏∏ ‰∏çÈúÄË¶ÅÈáçÊñ∞ËøûÊé•." :*/
fileprivate let str_frameQuantityData:String = "SOquoteK"
fileprivate let str_coverContent:[Character] = [" ","‰∏ç","ÈúÄ","Ë¶Å","Èáç","Êñ∞","Ëøû","\u{63a5}","."]

/*: "SOCKET Ê≠£Âú®ËøûÊé• ‰∏çÈúÄË¶ÅÈáçÊñ∞ËøûÊé•." :*/
fileprivate let str_dataName:String = "toCK"
fileprivate let str_modeContent:[Character] = ["Âú®","Ëøû","Êé•"," ","‰∏ç","ÈúÄ","Ë¶Å","Èáç","Êñ∞","Ëøû","Êé•","."]

/*: "&resume=1" :*/
fileprivate let str_burnTitle:String = "text let&res"

/*: "&lang= :*/
fileprivate let str_borderValue:String = "&lang=image explain let false"

/*: "SOCKET ÂºÄÂßãËøûÊé•, Âú∞ÂùÄÔºö :*/
fileprivate let str_modelValue:String = "SOCof"
fileprivate let str_aspectText:[Character] = ["T"," ","ÂºÄ","Âßã","Ëøû","\u{63a5}",","," ","Âú∞","ÂùÄ","\u{ff1a}"]

/*: "onNetDisabled" :*/
fileprivate let str_objectLabelValue:[Character] = ["o","n","N","e","t","D","i","s","a","b","l","e"]
fileprivate let str_addGenderData:[Character] = ["d"]

/*: "errno" :*/
fileprivate let str_qualityClickValue:[Character] = ["e","r","r","n","o"]

/*: "data" :*/
fileprivate let str_pickName:String = "dcontainertcontainer"

/*: "SOCKET ËøûÊé•‰øùÊ¥ªcmd: ping." :*/
fileprivate let str_frameFollowingContent:String = "SOyouK"
fileprivate let str_cellEqualToName:String = "mode for from control videoÊ¥ªcmd: p"
fileprivate let str_dataSharedValue:String = "filter infoing."

/*: "SOCKET trtc‰øùÊ¥ªcmd: callHeartbeat." :*/
fileprivate let str_errorName:[UInt8] = [0x2e,0x74,0x61,0x65,0x62,0x74,0x72,0x61,0x65,0x48,0x6c,0x6c,0x61,0x63,0x20,0x3a,0x64,0x6d,0x63,0xbb,0xb4,0xe6,0x9d,0xbf,0xe4,0x63,0x74,0x72,0x74,0x20,0x54,0x45,0x4b,0x43,0x4f,0x53]

/*: "SOCKET live‰øùÊ¥ªcmd: liveHeartBeat." :*/
fileprivate let str_equalMakeText:[UInt8] = [0x7e,0x7a,0x6e,0x76,0x70,0x7f,0x4b,0x97,0x94,0xa1,0x90,0xf,0xea,0xc8,0x11,0xdf,0xe6,0x8e,0x98,0x8f,0x65,0x4b,0x97,0x94,0xa1,0x90,0x73,0x90,0x8c,0x9d,0x9f,0x6d,0x90,0x8c,0x9f,0x59]

fileprivate func errorEqual(value num: UInt8) -> UInt8 {
    let value = Int(num) + 213
    if value > 255 {
        return UInt8(value - 256)
    } else {
        return UInt8(value)
    }
}

/*: "onP" :*/
fileprivate let str_nearPushValue:[Character] = ["o","n","P"]

/*: "msg" :*/
fileprivate let str_tableLikeName:String = "mappg"

/*: "üîó Â§ÑÁêÜÊ∂àÊÅØÔºöcmdName: :*/
fileprivate let str_toSessionValue:[Character] = ["üîó"," ","\u{5904}","ÁêÜ","Ê∂à","ÊÅØ","Ôºö","c","m","d","N","a","m","e"]
fileprivate let str_managerTitle:[Character] = [":"]

/*: , errNo: :*/
fileprivate let str_imageData:String = ", errNactual call bind at"
fileprivate let str_textValue:String = "o:i now instance class return"

/*: , msg: :*/
fileprivate let str_noticeValue:String = ", msg:line app if"

/*: , data: :*/
fileprivate let str_fileProgressData:[Character] = [","," ","d","a","t","a",":"]

/*: "SOCKET Êé•Êî∂ÂºÇÂ∏∏Ê∂àÊÅØÔºöcmdName: :*/
fileprivate let str_makeVideoLabelName:[Character] = ["S","O","C","K","E","T"," ","Êé•","Êî∂","\u{5f02}","Â∏∏","Ê∂à","ÊÅØ","Ôºö","c"]
fileprivate let str_emptyGiftText:[Character] = ["m"]
fileprivate let str_videoValue:[Character] = ["d","N","a","m","e",":"]

/*: "onReceivedGift" :*/
fileprivate let str_bottomValue:String = "onReif view"
fileprivate let str_levelValue:String = "cmakeivmake"

/*: "onVideoMatch" :*/
fileprivate let str_toValue:String = "succeed image pageonV"
fileprivate let str_listName:String = "m showideoM"

/*: "onRequestCall" :*/
fileprivate let str_viewData:[Character] = ["o","n","R","e","q","u","e","s","t","C","a"]
fileprivate let str_appValue:[Character] = ["l","l"]

/*: "onCancelCall" :*/
fileprivate let str_windowName:String = "var letonCan"
fileprivate let str_kitMakeTitle:String = "LL"

/*: "onRefuseCall" :*/
fileprivate let str_colorTopData:String = "onRuser type label if"
fileprivate let str_nowTitle:String = "efuseCallstop model view"

/*: "onAcceptCall" :*/
fileprivate let str_loadRemoveName:[Character] = ["o","n","A","c","c","e","p","t","C","a","l"]
fileprivate let str_atValue:[Character] = ["l"]

/*: "onStopCall" :*/
fileprivate let str_taskData:[Character] = ["o","n","S","t","o","p","C","a","l"]
fileprivate let str_leadingData:String = "toward"

/*: "freeCallTimes" :*/
fileprivate let str_pleaseAttentionValue:[Character] = ["f"]
fileprivate let str_linkClickData:[Character] = ["r","e","e","C","a","l","l","T","i","m","e","s"]

/*: "mfCoin" :*/
fileprivate let str_smallContent:[Character] = ["m","f","C","o","i","n"]

/*: "onMissCoin" :*/
fileprivate let str_marginPhoneValue:String = "onMisstoo title skin zone"

/*: "acceptCall" :*/
fileprivate let str_equalText:String = "modelccep"

/*: "stopCall" :*/
fileprivate let str_leadingName:String = "start"
fileprivate let str_actualData:String = "same control videotopCall"

/*: "requestCall" :*/
fileprivate let str_contentTitle:String = "rrow"
fileprivate let str_nearData:[Character] = ["q","u","e","s","t","C","a","l","l"]

/*: "[Invite you to a video call...]" :*/
fileprivate let str_contentSizeData:[UInt8] = [0x5d,0x2e,0x2e,0x2e,0x6c,0x6c,0x61,0x63,0x20,0x6f,0x65,0x64,0x69,0x76,0x20,0x61,0x20,0x6f,0x74,0x20,0x75,0x6f,0x79,0x20,0x65,0x74,0x69,0x76,0x6e,0x49,0x5b]

/*: "type" :*/
fileprivate let str_subShareValue:[Character] = ["t","y","p","e"]

/*: "[Invite you to a voice call...]" :*/
fileprivate let str_bottomTheValue:[UInt8] = [0xea,0xf8,0xdf,0xc7,0xd8,0xc5,0xd4,0x91,0xc8,0xde,0xc4,0x91,0xc5,0xde,0x91,0xd0,0x91,0xc7,0xde,0xd8,0xd2,0xd4,0x91,0xd2,0xd0,0xdd,0xdd,0x9f,0x9f,0x9f,0xec]

private func modelNo(progress num: UInt8) -> UInt8 {
    return num ^ 177
}

/*: "uid" :*/
fileprivate let str_saveName:[Character] = ["u","i","d"]

/*: "nickname" :*/
fileprivate let str_makeData:[Character] = ["n","i","c","k","n","a","m"]
fileprivate let str_sizeLiveValue:String = "tab"

/*: "headPic" :*/
fileprivate let str_directionName:[Character] = ["h"]
fileprivate let str_requestData:String = "eadPicsucceed make make"

/*: "onCallResume" :*/
fileprivate let str_normalValue:String = "onCallself self frame"
fileprivate let str_liveValue:String = "center other make var selfResume"

/*: "cancelCall" :*/
fileprivate let str_equalPlayerData:String = "catableel"

/*: "refuseCall" :*/
fileprivate let str_firstData:[Character] = ["r","e","f","u","s","e","C","a","l","l"]

/*: "onCallMotivation" :*/
fileprivate let str_tagData:[Character] = ["o","n","C","a"]
fileprivate let str_viewImageName:String = "name model error capllMoti"

/*: "onLiveWarning" :*/
fileprivate let str_countName:String = "oidentity"
fileprivate let str_insideTitle:String = "model gender content center currentLive"

/*: "reason" :*/
fileprivate let str_editData:String = "sharedeaso"
fileprivate let str_progressName:String = "observer"

/*: "time" :*/
fileprivate let str_listLayValue:[Character] = ["t","i","m","e"]

/*: "onStopLive" :*/
fileprivate let str_fromCellValue:String = "onStopformat center first"

/*: "onSendProgramGift" :*/
fileprivate let str_addText:String = "onSendgift status"
fileprivate let str_beanValue:String = "player freeProgr"

/*: "onGameFs" :*/
fileprivate let str_resultText:[Character] = ["o","n","G","a","m","e","F","s"]

/*: "broadStatus" :*/
fileprivate let str_kitName:String = "B"
fileprivate let str_titleValue:String = "inputoad"

/*: "onCallChatMsg" :*/
fileprivate let str_iconValue:[Character] = ["o","n","C","a","l","l","C","h","a","t","M","s","g"]

/*: "onNotificationPopupWin" :*/
fileprivate let str_cameraModeContent:String = "info request for float lineonNot"
fileprivate let str_statusTitle:String = "aticolor"

/*: "onUserBlock" :*/
fileprivate let str_whiteText:String = "cell card kit succeedonUs"
fileprivate let str_topData:String = "OCK"

/*: "freeCallWin" :*/
fileprivate let str_backgroundTextLayerName:String = "equal if gift target stringfreeCa"
fileprivate let str_userRequestTopValue:[Character] = ["l","l","W","i","n"]

//: Declare String End

// __DEBUG__
// __CLOSE_PRINT__
//
//  DataSocketDelegate.swift
//  AbroadTalking
//
//  Created by young on 2022/9/13.
//

//: import UIKit
import UIKit

//: import SocketRocket
import SocketRocket

// ‰øùÊ¥ªÂøÉË∑≥ÂåÖpingÁöÑÊó∂Èó¥Èó¥Èöî
//: let SOCKET_PING_INTERVAL = 60.0
let kLet_useData = 60.0
// ËßÜÈ¢ëÈÄöËØùÂøÉË∑≥ÂåÖÊó∂Èó¥Èó¥Èöî
//: let SOCKET_CALL_INTERVAL = 20.0
let kLet_successName = 20.0
// Áõ¥Êí≠ÂøÉË∑≥ÂåÖÊó∂Èó¥Èó¥Èöî
//: let SOCKET_LIVE_INTERVAL = 20.0
let kLet_restoreBottomValue = 20.0
// Â§±Ë¥•ÈáçËØïÊ¨°Êï∞
//: let SOCKET_ADDR_RETRY_COUNT = 3
let kLet_domainValue = 3
// socketËøûÊé•Ë∂ÖÊó∂Êó∂Èó¥
//: let SOCKET_MANAGER_CONNECT_TIMEOUT = 30.0
let kLet_seatBarValue = 30.0
// socketËøûÊé•ÊàêÂäüÁºìÂ≠òkey
//: let SOCKET_ADDR_KEY = "SOCKET_ADDR_KEY"
let kLet_bottomData = (String(str_layerValue) + String(str_taskSumimateName))

// ÈîôËØØÁ†Å
//: let SOCKET_MANAGER_UNCONNECTED_CODE = 5001
let kLet_userData = 5001
//: let SOCKET_MANAGER_SELF_BUSY_CODE   = 5002
let kLet_changeCallValue = 5002
//: let SOCKET_WITHOUT_NET_CODE         = 5003
let kLet_ageValue = 5003
//: let SOCKET_MANAGER_USER_LOGOUT_CLOSED_CODE = 1002
let kLet_noTitle = 1002

// Êé•Êî∂ÊñπÊî∂Âà∞Èü≥ËßÜÈ¢ëÈÄöËØùÈÄöÁü•
//: public let SOCKET_VIDEOCHAT_REQUESTCALL_NOTIFICATION = NSNotification.Name(rawValue: "SOCKET_VIDEOCHAT_REQUESTCALL_NOTIFICATION")
public let kLet_succeedTitle = NSNotification.Name(rawValue: String(bytes: str_managerData.map{sumButton(user: $0)}, encoding: .utf8)!)
// Ê∏∏ÊàèÈ£òÂ±èÈÄöÁü•
//: public let RECIVE_FLOATSCREEN_NOTIFICATION = NSNotification.Name(rawValue: "RECIVE_FLOATSCREEN_NOTIFICATION")
public let kLet_groupValue = NSNotification.Name(rawValue: String(bytes: str_hiddenData.reversed(), encoding: .utf8)!)

// MARK: - protocol

// MARK: - socketÂ§±Ë¥•‰ª£ÁêÜ

/// socketÊî∂Âà∞Â§±Ë¥•Ê∂àÊÅØ
//: protocol TalkingSocketManagerErrorDelegate: NSObjectProtocol {
protocol StartErrorDelegate: NSObjectProtocol {
    /// socketÊî∂Âà∞Â§±Ë¥•Ê∂àÊÅØ
    /// - Parameters:
    ///   - errorNo: Â§±Ë¥•ÁºñÁ†Å
    ///   - cmd: ÂëΩ‰ª§
    ///   - msg: Â§±Ë¥•‰ø°ÊÅØ
    ///  - data: Êï∞ÊçÆ
    //: func socket_didRecieveError(errorNo: Int, cmd: String, msg: String, data: [String: Any])
    func number1(errorNo: Int, cmd: String, msg: String, data: [String: Any])
}

// MARK: - ËßÜÈ¢ëÈÄüÈÖç‰ª£ÁêÜ

/// ËßÜÈ¢ëÈÄüÈÖç‰ª£ÁêÜÔºàÁî∑Ôºâ
//: protocol SocketManagerVideoMatchDelegate: NSObjectProtocol {
protocol TotalMatchDelegate: NSObjectProtocol {
    /// ËßÜÈ¢ëÈÄüÈÖçÊàêÂäü
    /// - Parameter data: ÈÄüÈÖçÊï∞ÊçÆ
    //: func socket_match_onVideoMatch(data: [String: Any])
    func discredit(data: [String: Any])

    /// ÂåπÈÖçÊàêÂäüÔºåÂèØ‰ª•Êã®ÊâìÈÄöËØù
    /// - Parameter data: ÈÄüÈÖçÊï∞ÊçÆ
    //: func socket_match_onRequestCall(data: [String: Any])
    func giftCircle(data: [String: Any])
}

// MARK: - Èü≥ËßÜÈ¢ëÈÄöËØù‰ª£ÁêÜ

/// ËßÜÈ¢ëÈÄöËØù„ÄêÊã®ÊâìÊñπ„Äë‰ª£ÁêÜ
//: protocol SocketManagerVideoChatCallerDelegate: NSObjectProtocol {
protocol MediaCallerDelegate: NSObjectProtocol {
    /// Êé•Êî∂ÊñπÊé•Âèó‰∫ÜÊù•Áîµ
    /// - Parameter data: Êï∞ÊçÆ
    //: func socket_videoChat_acceptCall(data: [String: Any])
    func callArray(data: [String: Any])

    /// Êé•Êî∂ÊñπÊåÇÊñ≠‰∫ÜÈÄöËØùÔºàÈÄöËØù‰∏≠Ôºâ
    /// - Parameter data: Êï∞ÊçÆ
    //: func socket_videoChat_stopCall(data: [String: Any])
    func backgroundTo(data: [String: Any])

    /// Êã®ÊâìÊñπÊãíÁªù‰∫ÜÈÄöËØùÔºåÊé•Êî∂ÊñπÊî∂Âà∞ËØ•Êåá‰ª§ÔºàÊú™ÈÄöËØùÔºâ
    /// - Parameter data: Êï∞ÊçÆ
    //: func socket_videoChat_cancelCall(data: [String: Any])
    func fileNameMode(data: [String: Any])

    /// ÈÄöËØù‰ΩôÈ¢ù‰∏çË∂≥ÊèêÈÜí
    /// - Parameters:
    ///   - msg: ÊèêÈÜí‰ø°ÊÅØ
    ///   - data: Êï∞ÊçÆ
    //: func socket_videoChat_onMissCoin(msg: String, data: [String: Any])
    func star(msg: String, data: [String: Any])
}

/// ËßÜÈ¢ëÈÄöËØù„ÄêÊé•Êî∂Êñπ„Äë‰ª£ÁêÜ
//: @objc protocol SocketManagerVideoChatCalledPartyDelegate: NSObjectProtocol {
@objc protocol InstanceObjectProtocol: NSObjectProtocol {
    /// Êé•Êî∂ÊñπÊãíÁªù‰∫ÜÈÄöËØùÔºåÊã®ÊâìÊñπÊî∂Âà∞ËØ•Êåá‰ª§ÔºàÊú™ÈÄöËØùÔºâ
    /// - Parameter data: Êï∞ÊçÆ
    //: func socket_videoChat_refuseCall(data: [String: Any])
    func noneFileShow(data: [String: Any])

    /// Êé•Êî∂ÊñπÊé•Âèó‰∫ÜÈÄöËØùÔºåÊîπÂèòÁä∂ÊÄÅ‰∏∫ÈÄöËØù‰∏≠ÔºåacceptCallÂõûÊâß
    /// - Parameter data: Êï∞ÊçÆ
    //: func socket_videoChat_onAcceptCall(data: [String: Any])
    func designModel(data: [String: Any])

    /// Â•≥ÊÄßÈÄöËØùÁßØÂàÜÊøÄÂä±Âä®ÊïàÂ±ïÁ§∫
    /// - Parameters:
    ///   - data: Êï∞ÊçÆ
    //: @objc optional func socket_videoChat_onCallMotivation(data: [String: Any])
    @objc optional func socketToData(data: [String: Any])
}

//: class TalkingSocketManager: NSObject {
class DataSocketDelegate: NSObject {
    //: enum SocketRetryType: String {
    enum KindIcon: String {
        //: case AppLogin = "Áî®Êà∑ÁôªÂΩï"
        case AppLogin = "Áî®Êà∑ÁôªÂΩï"
        //: case NetWork = "ÁΩëÁªúÈáçËøû"
        case NetWork = "ÁΩëÁªúÈáçËøû"
        //: case EnterForeground = "ÂõûÂà∞APP"
        case EnterForeground = "ÂõûÂà∞APP"
        //: case SocketFail = "ËøûÊé•Â§±Ë¥•"
        case SocketFail = "ËøûÊé•Â§±Ë¥•"
        //: case SocketClose = "ËøûÊé•ÂÖ≥Èó≠"
        case SocketClose = "ËøûÊé•ÂÖ≥Èó≠"
        //: case SocketSendMsg = "ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•"
        case SocketSendMsg = "ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•"
    }

    /// Èü≥ËßÜÈ¢ëÊúÄÂ∞èÂåñ
    //: var currTalkingVC: AnyObject?
    var currTalkingVC: AnyObject? // ÂΩìÂâçÊ≠£Âú®ÈÄöËØùÁöÑÈü≥ËßÜÈ¢ëËßÜÂõæ
    //: var videoMiniPosition = CGPoint(
    var videoMiniPosition = CGPoint( // Èü≥ËßÜÈ¢ëÂ∞èÁ™óÂè£ÈªòËÆ§‰ΩçÁΩÆ
        //: x: LanguageManager.shared.direction == .rightToLeft ? 0:ScreenWidth,
        x: MeanSunLanguageManager.shared.direction == .rightToLeft ? 0 : kLet_senseContent,
        //: y: StatusBarHeight+190
        y: kLet_messageContent + 190
    )
    //: var liveMiniPosition = CGPoint(
    var liveMiniPosition = CGPoint( // Áõ¥Êí≠Â∞èÁ™óÂè£ÈªòËÆ§‰ΩçÁΩÆ
        //: x: LanguageManager.shared.direction == .rightToLeft ? 0:ScreenWidth,
        x: MeanSunLanguageManager.shared.direction == .rightToLeft ? 0 : kLet_senseContent,
        //: y: StatusBarHeight+190
        y: kLet_messageContent + 190
    )
    //: var partyMiniPosition = CGPoint(
    var partyMiniPosition = CGPoint( // ËØ≠ËÅäÊàøÂ∞èÁ™óÂè£ÈªòËÆ§‰ΩçÁΩÆ
        //: x: LanguageManager.shared.direction == .rightToLeft ? 0:ScreenWidth,
        x: MeanSunLanguageManager.shared.direction == .rightToLeft ? 0 : kLet_senseContent,
        //: y: StatusBarHeight+500
        y: kLet_messageContent + 500
    )
    //: var containerView: UIView?
    var containerView: UIView? // Â∞èÁ™óÂè£ÂÆπÂô®

    /// delegate
    //: weak var errorDelegate: TalkingSocketManagerErrorDelegate?
    weak var errorDelegate: StartErrorDelegate? // error !=0 ÁöÑÂºÇÂ∏∏Â§ÑÁêÜ
    //: weak var videoMatchDelegate: SocketManagerVideoMatchDelegate?
    weak var videoMatchDelegate: TotalMatchDelegate? // ËßÜÈ¢ëÈÄöËØùÈÄüÈÖç
    //: weak var callerDelegate: SocketManagerVideoChatCallerDelegate?
    weak var callerDelegate: MediaCallerDelegate? // ËßÜÈ¢ëÈÄöËØù„ÄêÊã®ÊâìÊñπ„Äë
    //: weak var calledPartyDelegate: SocketManagerVideoChatCalledPartyDelegate?
    weak var calledPartyDelegate: InstanceObjectProtocol? // ËßÜÈ¢ëÈÄöËØù„ÄêÊé•Êî∂Êñπ„Äë

    //: private var webSocket: SRWebSocket?
    private var webSocket: SRWebSocket?
    //: private var keepAliveTimer: Timer?
    private var keepAliveTimer: Timer? // socket‰øùÊ¥ªÂøÉË∑≥ÂåÖ
    //: private var connectUrlStr: String?
    private var connectUrlStr: String? // socketËøûÊé•Âú∞ÂùÄ
    //: private var linkIndex = 0
    private var linkIndex = 0 // ÂΩìÂâçËøûÊé•Âú∞ÂùÄÁ¥¢Âºï
    //: private var linkAddrArr: [String]?
    private var linkAddrArr: [String]? // ËøûÊé•Âú∞ÂùÄÊï∞ÁªÑ
    //: private var failureCount = 0
    private var failureCount = 0 // ËøûÊé•Â§±Ë¥•Ê¨°Êï∞
    //: private let disposeBag = DisposeBag()
    private let disposeBag = DisposeBag()

    /// talking
    //: var needReconnect = false
    var needReconnect = false // Êñ≠ÁΩëÈáçËøûsocket
    //: @objc dynamic var isTalking = false
    @objc dynamic var isTalking = false // ÊòØÂê¶ËßÜÈ¢ëÈÄöËØù‰∏≠
    //: @objc dynamic var isCalling = false
    @objc dynamic var isCalling = false // ÊòØÂê¶ÂëºÂè´‰∏≠
    //: private var talkTimer: Timer?
    private var talkTimer: Timer? // ËßÜÈ¢ëÈÄöËØùÂøÉË∑≥ÂåÖ
    //: private var liveTimer: Timer?
    private var liveTimer: Timer? // Áõ¥Êí≠ÂøÉË∑≥ÂåÖ
    //: private var unHandleCallData: [String: Any]?
    private var unHandleCallData: [String: Any]? // Âú®ÂêéÂè∞Êî∂Âà∞ÁöÑÊé•Âê¨Ê∂àÊÅØ
    //: private var cancelCall = false
    private var cancelCall = false // Êã®ÊâìÊñπÊòØÂê¶ÂÅúÊ≠¢ÂëºÂè´ÔºàËøòÊú™ÊâìÈÄöÔºâ
    //: var isFreeCall = false
    var isFreeCall = false // ÊòØÂê¶ÂèëËµ∑ÂÖçË¥πÈÄöËØù

    // singleton
    //: static let shared = TalkingSocketManager()
    static let shared = DataSocketDelegate()
    //: override func copy() -> Any { return self }
    override func copy() -> Any { return self }
    //: override func mutableCopy() -> Any { return self }
    override func mutableCopy() -> Any { return self }
    //: private override init() {
    override private init() {
        //: super.init()
        super.init()
        // ÁΩëÁªúÁä∂ÊÄÅÁõëÂê¨
        //: NotificationCenter.default.addObserver(self,
        NotificationCenter.default.addObserver(self,
                                               //: selector: #selector(reachabilityChanged(note:)),
                                               selector: #selector(noteWith(note:)),
                                               //: name: .reachabilityChanged,
                                               name: .reachabilityChanged,
                                               //: object: nil)
                                               object: nil)

        //: NotificationCenter.default.addObserver(self,
        NotificationCenter.default.addObserver(self,
                                               //: selector: #selector(checkWebsocket),
                                               selector: #selector(upDoingView),
                                               //: name: UIApplication.willEnterForegroundNotification,
                                               name: UIApplication.willEnterForegroundNotification,
                                               //: object: nil)
                                               object: nil)

        // Èü≥ËßÜÈ¢ëÂëºÂè´Êó∂
        //: self.rx
        self.rx
            //: .observeWeakly(Bool.self, "isCalling")
            .observeWeakly(Bool.self, (String(str_valueData.prefix(9))))
            //: .subscribe(onNext: {(value) in
            .subscribe(onNext: { value in
                //: if value == true {
                if value == true {
                    // ‰∏äÊä•Â•≥ÊÄßÁî®Êà∑busyÁä∂ÊÄÅ
                    //: (TalkingApplication.shared as! TalkingApplication).destroyTimer()
                    (ShouldKingfisherCompatible.shared as! ShouldKingfisherCompatible).fullMoon()
                }

                //: }).disposed(by: disposeBag)
            }).disposed(by: disposeBag)

        // Èü≥ËßÜÈ¢ëÈÄöËØùÊó∂
        //: self.rx
        self.rx
            //: .observeWeakly(Bool.self, "isTalking")
            .observeWeakly(Bool.self, (String(str_viewName.suffix(5)) + "king"))
            //: .subscribe(onNext: { (value) in
            .subscribe(onNext: { value in
                //: if value == true {
                if value == true {
                    // ‰∏äÊä•Â•≥ÊÄßÁî®Êà∑busyÁä∂ÊÄÅ
                    //: (TalkingApplication.shared as! TalkingApplication).destroyTimer()
                    (ShouldKingfisherCompatible.shared as! ShouldKingfisherCompatible).fullMoon()
                }

                //: }).disposed(by: disposeBag)
            }).disposed(by: disposeBag)
    }

    //: deinit {
    deinit {
        //: NotificationCenter.default.removeObserver(self)
        NotificationCenter.default.removeObserver(self)
    }
}

// MARK: - SRWebSocketDelegate

//: extension TalkingSocketManager: SRWebSocketDelegate {
extension DataSocketDelegate: SRWebSocketDelegate {
    //: func webSocketDidOpen(_ webSocket: SRWebSocket!) {
    func webSocketDidOpen(_ webSocket: SRWebSocket!) {
        //: guard self.webSocket == webSocket else { return }
        guard self.webSocket == webSocket else { return }
        //: UploadLogTool.writeLog(msg: "SOCKET ËøûÊé•ÊàêÂäü.")
        QueryThen.bringInstance(msg: (str_modeTopData.uppercased() + String(str_useTitle)))
        //: sendPing()
        pingSend()
        //: NotificationCenter.default.post(name: SOCKET_IS_OPEN_NOTIFICATION,
        NotificationCenter.default.post(name: kLet_successTitle,
                                        //: object: nil,
                                        object: nil,
                                        //: userInfo: nil)
                                        userInfo: nil)
        // ËøòÂéüÊñ≠ÁΩëÈáçËøûÁä∂ÊÄÅ
        //: self.needReconnect = false
        self.needReconnect = false

        //: self.failureCount = 0
        self.failureCount = 0

        // ‰øùÂ≠òÊàêÂäüËøûÊé•ÁöÑËÆ∞ÂΩï
        //: if self.linkIndex < self.linkAddrArr?.count ?? 0 {
        if self.linkIndex < self.linkAddrArr?.count ?? 0 {
            //: UserDefaults.standard.set(self.linkAddrArr?[self.linkIndex], forKey: SOCKET_ADDR_KEY)
            UserDefaults.standard.set(self.linkAddrArr?[self.linkIndex], forKey: kLet_bottomData)
        }
        // ÂàõÂª∫Èü≥ËßÜÈ¢ëÊúÄÂ∞èÂåñÁ™óÂè£ÂÆπÂô®
        //: mini_createContainerView()
        headClick()
    }

    //: func webSocket(_ webSocket: SRWebSocket!, didFailWithError error: Error!) {
    func webSocket(_ webSocket: SRWebSocket!, didFailWithError error: Error!) {
        //: UploadLogTool.writeLog(msg: "SOCKET ËøûÊé•Â§±Ë¥•, error:\(error.localizedDescription).")
        QueryThen.bringInstance(msg: (String(str_buttonValue) + str_lineValue + "rror:") + "\(error.localizedDescription).")
        //: guard self.webSocket == webSocket else { return }
        guard self.webSocket == webSocket else { return }

        //: guard let status = WithAdministratorAppManager.share.reachability?.connection, status != .unavailable else {
        guard let status = WithAdministratorAppManager.share.reachability?.connection, status != .unavailable else {
            //: return
            return
        }
        //: if self.failureCount == SOCKET_ADDR_RETRY_COUNT {
        if self.failureCount == kLet_domainValue {
            //: self.failureCount = 0
            self.failureCount = 0
            //: self.linkIndex = (self.linkIndex == 0) ? 1:0
            self.linkIndex = (self.linkIndex == 0) ? 1 : 0
            //: self.connectUrlStr = getWebSocketPath(isRetry: true)
            self.connectUrlStr = alongRetry(isRetry: true)
            //: UploadLogTool.writeLog(msg: "SOCKET Â§±Ë¥•\(SOCKET_ADDR_RETRY_COUNT)Ê¨°, ÂàáÊç¢ËøáSocketÂüüÂêçÈáçÊñ∞Â∞ùËØïÔºåÂú∞ÂùÄÔºö\(connectUrlStr ?? "").")
            QueryThen.bringInstance(msg: (String(str_pageTableText)) + "\(kLet_domainValue)" + (String(str_contentName) + String(str_makeValue.suffix(5)) + String(str_priceName)) + "\(connectUrlStr ?? "").")
            //: } else {
        } else {
            //: self.failureCount += 1
            self.failureCount += 1
        }
        //: self.reconnectWebSocket(timeInterval: 2, type: .SocketFail)
        self.labelType(timeInterval: 2, type: .SocketFail)
    }

    //: func webSocket(_ webSocket: SRWebSocket!, didReceiveMessage message: Any!) {
    func webSocket(_ webSocket: SRWebSocket!, didReceiveMessage message: Any!) {
        //: guard self.webSocket == webSocket else { return }
        guard self.webSocket == webSocket else { return }
        //: self.handleReceiveMessage(message: message as? String)
        self.handleOn(message: message as? String)
    }

    //: func webSocket(_ webSocket: SRWebSocket!, didCloseWithCode code: Int, reason: String!, wasClean: Bool) {
    func webSocket(_ webSocket: SRWebSocket!, didCloseWithCode code: Int, reason: String!, wasClean _: Bool) {
        //: UploadLogTool.writeLog(msg: "SOCKET Â∑≤ÂÖ≥Èó≠, code:\(code), reason:\(String(describing: reason)).")
        QueryThen.bringInstance(msg: (str_voiceData.replacingOccurrences(of: "from", with: "S") + "ET \u{5df2}ÂÖ≥" + String(str_flagName.prefix(5)) + String(str_fatalValue)) + "\(code)" + (String(str_viewValue.prefix(4)) + String(str_nearValue)) + "\(String(describing: reason)).")
        //: guard self.webSocket == webSocket else { return }
        guard self.webSocket == webSocket else { return }

        //: self.closeWebSocket(userLoginOut: false)
        self.approximateMatchOut(userLoginOut: false)
        //: if code == SOCKET_MANAGER_USER_LOGOUT_CLOSED_CODE {
        if code == kLet_noTitle {
            //: return
            return
        }
        //: if let status = WithAdministratorAppManager.share.reachability?.connection, status != .unavailable {
        if let status = WithAdministratorAppManager.share.reachability?.connection, status != .unavailable {
            //: self.reconnectWebSocket(timeInterval: 5, type: .SocketClose)
            self.labelType(timeInterval: 5, type: .SocketClose)
        }
    }

    /// Ëé∑ÂèñsocketÂú∞ÂùÄ
    //: func getWebSocketPath(isRetry: Bool) -> String? {
    func alongRetry(isRetry: Bool) -> String? {
        //: var linkAddr = ""
        var linkAddr = ""
        //: self.linkAddrArr = WithAdministratorAppManager.share.appConfigMode.ws
        self.linkAddrArr = WithAdministratorAppManager.share.appConfigMode.ws
        //: if self.linkAddrArr == nil || self.linkAddrArr?.count == 0 {
        if self.linkAddrArr == nil || self.linkAddrArr?.count == 0 {
            //: self.linkAddrArr = defaultWSArr()
            self.linkAddrArr = sole()
        }
        //: let lastAddr = UserDefaults.standard.string(forKey: SOCKET_ADDR_KEY)
        let lastAddr = UserDefaults.standard.string(forKey: kLet_bottomData)
        //: if lastAddr == nil || isRetry {
        if lastAddr == nil || isRetry {
            //: if let temLinkAddr = self.linkAddrArr?[safe: self.linkIndex] {
            if let temLinkAddr = self.linkAddrArr?[safe: self.linkIndex] {
                //: linkAddr = temLinkAddr
                linkAddr = temLinkAddr
                //: } else {
            } else {
                //: self.linkIndex = 0
                self.linkIndex = 0
                //: linkAddr = self.linkAddrArr!.first!
                linkAddr = self.linkAddrArr!.first!
            }
            //: } else {
        } else {
            //: if let index = self.linkAddrArr!.firstIndex(of: lastAddr!) {
            if let index = self.linkAddrArr!.firstIndex(of: lastAddr!) {
                //: self.linkIndex = index
                self.linkIndex = index
                //: linkAddr = lastAddr!
                linkAddr = lastAddr!
                //: }else{
            } else {
                //: self.linkIndex = 0
                self.linkIndex = 0
                //: linkAddr = self.linkAddrArr!.first!
                linkAddr = self.linkAddrArr!.first!
            }
        }

        //: let uid = WithAdministratorAppManager.share.loginUid
        let uid = WithAdministratorAppManager.share.loginUid
        //: let sid = WithAdministratorAppManager.share.loginSessionId
        let sid = WithAdministratorAppManager.share.loginSessionId
        //: let address = "ws://\(linkAddr)/?sid=\(sid)&uid=\(uid)&platform=iphone&version=\(AppNetVersion)&packageId=\(PackageID)"
        let address = "ws://\(linkAddr)" + (String(str_toName.suffix(6))) + "\(sid)" + (String(str_detailSectionData.suffix(5))) + "\(uid)" + (String(str_modelText.suffix(5)) + "form" + String(str_shareValue.prefix(4)) + "one&v" + String(str_directionData.prefix(7))) + "\(kLet_timeTitle)" + (String(str_topSharedContent.suffix(6)) + "geId=") + "\(kLet_nameTopText)"
        //: return address
        return address
    }

    /// ÈªòËÆ§Âú∞ÂùÄ
    //: func defaultWSArr() -> [String] {
    func sole() -> [String] {
        //: return Environment_Formal ? ["1v1server.\(ReplaceUrlDomain).com:7766"] : ["43.129.185.194:7767"]
        return kLet_intervalLimitValue ? [(String(str_ofValue.suffix(5)) + "rver.") + "\(kLet_clickValue)" + (String(str_toTitle.prefix(4)) + ":7766")] : [(String(str_dataValue) + str_messageData.capitalized + "94:7767")]
    }
}

// MARK: - NotificationCenter

//: extension TalkingSocketManager {
extension DataSocketDelegate {
    /// ÁΩëÁªúÁõëÂê¨ÈÄöÁü•
    //: @objc func reachabilityChanged(note: Notification) {
    @objc func noteWith(note: Notification) {
        //: let reachability = note.object as? Reachability
        let reachability = note.object as? Reachability
        //: if reachability?.connection == .unavailable {
        if reachability?.connection == .unavailable {
            // Êñ≠ÁΩë, ÂÖ≥Èó≠socket
            //: UploadLogTool.writeLog(msg: "SOCKET ÁΩëÁªúreachabilityChangedÁõëÂê¨ÔºåÊñ≠ÁΩëÂÖ≥Èó≠.")
            QueryThen.bringInstance(msg: String(bytes: str_imageValue.map{callFile(again: $0)}, encoding: .utf8)!)
            //: self.closeWebSocket(userLoginOut: false)
            self.approximateMatchOut(userLoginOut: false)
            //: } else {
        } else {
            // ÁΩëÁªúÂéüÂõ†ÈáçËøû
            //: self.reconnectWebSocket(timeInterval: 2.0, type: .NetWork)
            self.labelType(timeInterval: 2.0, type: .NetWork)
        }
    }

    /// Ê£ÄÊµãsocketÈìæÊé•Áä∂ÊÄÅ
    //: @objc func checkWebsocket() {
    @objc func upDoingView() {
        //: self.reconnectWebSocket(timeInterval: 2.0, type: .EnterForeground)
        self.labelType(timeInterval: 2.0, type: .EnterForeground)
        // Â§ÑÁêÜÈÄöËØùÈÄªËæë
        //: self.handleCallData()
        self.bagTakeCareData()
    }
}

// MARK: - Event

//: extension TalkingSocketManager {
extension DataSocketDelegate {
    /// socket‰øùÊ¥ªÂøÉË∑≥ÂåÖ
    //: private func sendPing() {
    private func pingSend() {
        //: self.keepAliveTimer = Timer.scheduledTimer(withTimeInterval: SOCKET_PING_INTERVAL, block: { timer in
        self.keepAliveTimer = Timer.scheduledTimer(withTimeInterval: kLet_useData, block: { _ in
            //: self.sendMessage(info: ["cmd": "ping"])
            self.demonstrateInfo(info: [(String(str_viewText)): (String(str_modeTitle))])
            //: }, repeats: true)
        }, repeats: true)
    }

    /// ÂºÄÂêØËßÜÈ¢ëÈÄöËØùÂøÉË∑≥ÂåÖ
    //: private func startTalkPing() {
    private func supplement() {
        //: endTalkingPing()
        direct()

        //: self.talkTimer = Timer.scheduledTimer(withTimeInterval: SOCKET_CALL_INTERVAL, block: {  timer in
        self.talkTimer = Timer.scheduledTimer(withTimeInterval: kLet_successName, block: { _ in
            /// ‰∏çÂú®ÈÄöËØù‰∏≠Ôºå‰∏çÂú®Èü≥ËßÜÈ¢ëÈÄöËØùÈ°µÔºåÊ≤°ÊúâÂºÄÂêØÊúÄÂ∞èÂåñÊó∂
            //: if !self.isTalking || (self.currentViewController()?.isKind(of: TalkingVideoChatViewController.self) == false  && self.currentViewController()?.isKind(of: TalkingVoiceChatViewController.self) == false ) && (self.currTalkingVC?.isKind(of: TalkingVideoChatViewController.self) == false  && self.currTalkingVC?.isKind(of: TalkingVoiceChatViewController.self) == false ) {
            if !self.isTalking || (self.actionController()?.isKind(of: SubmitExtraObjectProtocol.self) == false && self.actionController()?.isKind(of: CoverMessageCallerDelegate.self) == false) && (self.currTalkingVC?.isKind(of: SubmitExtraObjectProtocol.self) == false && self.currTalkingVC?.isKind(of: CoverMessageCallerDelegate.self) == false) {
                //: return
                return
            }
            //: self.sendMessage(info: ["cmd": "callHeartbeat"])
            self.demonstrateInfo(info: [(String(str_viewText)): (String(str_modelData))])
            //: }, repeats: true)
        }, repeats: true)
    }

    /// ÁªìÊùüËßÜÈ¢ëÈÄöËØùÂøÉË∑≥ÂåÖ
    //: func endTalkingPing() {
    func direct() {
        //: if self.talkTimer != nil {
        if self.talkTimer != nil {
            //: self.talkTimer?.invalidate()
            self.talkTimer?.invalidate()
            //: self.talkTimer = nil
            self.talkTimer = nil
        }
    }

    /// Â§ÑÁêÜÈÄöËØùÈÄªËæë
    //: func handleCallData() {
    func bagTakeCareData() {
        //: if self.cancelCall == true {
        if self.cancelCall == true { // Êã®ÊâìÊñπÂ∑≤ÂÅúÊ≠¢ÂëºÂè´
            //: self.cancelCall = false
            self.cancelCall = false
            //: self.unHandleCallData = nil
            self.unHandleCallData = nil
            //: return
            return
        }

        //: if self.unHandleCallData != nil {
        if self.unHandleCallData != nil {
            //: let recievedTime = self.unHandleCallData!["recievedDate"] as! Date
            let recievedTime = self.unHandleCallData![(String(str_resignText) + String(str_inputValue.prefix(4)))] as! Date
            //: let currentTime = Date()
            let currentTime = Date()
            //: if currentTime.timeIntervalSince(recievedTime) < VIDEO_1v1_RECIEVED_CALL_TIMEOUT {
            if currentTime.timeIntervalSince(recievedTime) < kLet_viewValue {
                //: WithAdministratorAppManager.share.recieve1v1TalkRequest(info: self.unHandleCallData!)
                WithAdministratorAppManager.share.becomeCall(info: self.unHandleCallData!)
            }
            //: self.unHandleCallData = nil
            self.unHandleCallData = nil
        }
    }
}

// MARK: - Áõ¥Êí≠ÂøÉË∑≥ÂåÖ

//: extension TalkingSocketManager {
extension DataSocketDelegate {
    /// ÂºÄÂêØÁõ¥Êí≠ÂøÉË∑≥ÂåÖ
    //: func startLivePing() {
    func factoid() {
        //: endLivePing()
        draftCopyPing()
        //: self.liveTimer = Timer.scheduledTimer(withTimeInterval: SOCKET_LIVE_INTERVAL, block: { timer in
        self.liveTimer = Timer.scheduledTimer(withTimeInterval: kLet_restoreBottomValue, block: { _ in
            //: self.sendMessage(info: ["cmd": "liveHeartBeat"])
            self.demonstrateInfo(info: [(String(str_viewText)): (String(str_tipLabelName))])
            //: }, repeats: true)
        }, repeats: true)
    }

    /// ÁªìÊùüÁõ¥Êí≠ÂøÉË∑≥ÂåÖ
    //: func endLivePing() {
    func draftCopyPing() {
        //: if self.liveTimer != nil {
        if self.liveTimer != nil {
            //: self.liveTimer?.invalidate()
            self.liveTimer?.invalidate()
            //: self.liveTimer = nil
            self.liveTimer = nil
        }
    }
}

// MARK: - Èü≥ËßÜÈ¢ëÁ™óÂè£ÊúÄÂ∞èÂåñ

//: extension TalkingSocketManager {
extension DataSocketDelegate {
    /// ÂàõÂª∫Á™óÂè£ÊúÄÂ∞èÂåñÂÆπÂô®
    //: private func mini_createContainerView() {
    private func headClick() {
        //: guard self.containerView == nil else { return }
        guard self.containerView == nil else { return }

        //: let windowView = TalkingMiniContainerView()
        let windowView = SendContainerThen()
        //: let keyWindow = IconThen.getWindow()
        let keyWindow = IconThen.getBind()
        //: windowView.frame = keyWindow.bounds
        windowView.frame = keyWindow.bounds
        //: windowView.backgroundColor = .clear
        windowView.backgroundColor = .clear
        //: keyWindow.addSubview(windowView)
        keyWindow.addSubview(windowView)
        //: self.containerView = windowView
        self.containerView = windowView
        //: self.containerView?.isHidden = !self.isTalking
        self.containerView?.isHidden = !self.isTalking
    }

    /// ÁßªÈô§Á™óÂè£ÊúÄÂ∞èÂåñÂÆπÂô®
    //: private func mini_removeContainerView() {
    private func imageMoldView() {
        //: guard self.containerView != nil else { return }
        guard self.containerView != nil else { return }
        // Èò≤Ê≠¢Êä¢ÁôªÂΩïÊó∂ÔºåÁî®Êà∑ËøòÂú®Áõ¥Êí≠‰∏≠/ËØ≠ËÅäÊàø
        //: guard TalkingLiveManager.shared().isLive == false else { return }
        guard SectionPushListener.cover().isLive == false else { return }
        //: guard TalkingVoiceRoomManager.shared().isParty == false else { return }
        guard StackMThen.estimated().isParty == false else { return }

        //: self.containerView?.removeAllSubviews()
        self.containerView?.removeAllSubviews()
        //: self.containerView?.removeFromSuperview()
        self.containerView?.removeFromSuperview()
        //: self.containerView = nil
        self.containerView = nil
    }
}

// MARK: - Socket

//: extension TalkingSocketManager {
extension DataSocketDelegate {
    /// ÂÖ≥Èó≠socket
    /// - Parameter userLoginOut: ÊòØÂê¶ÊòØÁî®Êà∑ÈÄÄÂá∫
    //: func closeWebSocket(userLoginOut: Bool) {
    func approximateMatchOut(userLoginOut: Bool) {
        //: printLog(message: "üîó ÂÖ≥Èó≠ socket")
        printLog(message: (str_genderContent.capitalized + str_indexText.replacingOccurrences(of: "value", with: "o")))
        //: if self.webSocket != nil {
        if self.webSocket != nil {
            //: self.webSocket?.delegate = nil
            self.webSocket?.delegate = nil
            //: if userLoginOut == true {
            if userLoginOut == true {
                //: self.webSocket?.close(withCode: SOCKET_MANAGER_USER_LOGOUT_CLOSED_CODE, reason: "The user logs out")
                self.webSocket?.close(withCode: kLet_noTitle, reason: (String(str_labData) + String(str_dateText.prefix(7))))
                //: } else {
            } else {
                //: self.webSocket?.close()
                self.webSocket?.close()
            }
            //: self.webSocket = nil
            self.webSocket = nil
        }

        //: if self.keepAliveTimer != nil {
        if self.keepAliveTimer != nil {
            //: self.keepAliveTimer?.invalidate()
            self.keepAliveTimer?.invalidate()
            //: self.keepAliveTimer = nil
            self.keepAliveTimer = nil
        }

        //: endTalkingPing()
        direct()

        //: if userLoginOut == true {
        if userLoginOut == true {
            //: self.connectUrlStr = nil
            self.connectUrlStr = nil
            // ÈîÄÊØÅÊúÄÂ∞èÂåñÁ™óÂè£
            //: mini_removeContainerView()
            imageMoldView()
        }
    }

    /// Êõ¥Êñ∞socketËøûÊé•
    //: func updateWebSocket() {
    func prescription() {
        //: self.connectUrlStr = TalkingSocketManager.shared.getWebSocketPath(isRetry: false)
        self.connectUrlStr = DataSocketDelegate.shared.alongRetry(isRetry: false)
        //: self.reconnectWebSocket(timeInterval: 0, type: .AppLogin)
        self.labelType(timeInterval: 0, type: .AppLogin)
    }

    /// ÈáçËøûsocket
    //: private func reconnectWebSocket(timeInterval: TimeInterval, type: SocketRetryType) {
    private func labelType(timeInterval: TimeInterval, type: KindIcon) {
        //: DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + timeInterval) {
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + timeInterval) {
            //: UploadLogTool.writeLog(msg: "SOCKET \(type.rawValue)ÈáçËøû. ÈáçËØïÊ¨°Êï∞Ôºö\(self.failureCount), Âú∞ÂùÄÔºö\(self.connectUrlStr ?? "").")
            QueryThen.bringInstance(msg: (String(str_resultValue) + str_frameName.replacingOccurrences(of: "from", with: " ")) + "\(type.rawValue)" + (String(str_userData) + String(str_messageResponseName)) + "\(self.failureCount), Âú∞ÂùÄÔºö\(self.connectUrlStr ?? "").")
            //: self.connectWebSocket(urlStr: self.connectUrlStr)
            self.dataWith(urlStr: self.connectUrlStr)
        }
    }

    /// ËøûÊé•socket
    //: private func connectWebSocket(urlStr: String?) {
    private func dataWith(urlStr: String?) {
        //: guard urlStr?.isEmpty == false else { return }
        guard urlStr?.isEmpty == false else { return }

        //: if urlStr == self.connectUrlStr && self.webSocket != nil && (self.webSocket?.readyState == .OPEN || self.webSocket?.readyState == .CONNECTING) {
        if urlStr == self.connectUrlStr, self.webSocket != nil, self.webSocket?.readyState == .OPEN || self.webSocket?.readyState == .CONNECTING {
            //: if (self.webSocket?.readyState == .OPEN) {
            if self.webSocket?.readyState == .OPEN {
                //: UploadLogTool.writeLog(msg: "SOCKET ËøûÊé•Ê≠£Â∏∏ ‰∏çÈúÄË¶ÅÈáçÊñ∞ËøûÊé•.")
                QueryThen.bringInstance(msg: (str_frameQuantityData.replacingOccurrences(of: "quote", with: "C") + "ET Ëøû\u{63a5}Ê≠£\u{5e38}" + String(str_coverContent)))
                //: } else {
            } else {
                //: UploadLogTool.writeLog(msg: "SOCKET Ê≠£Âú®ËøûÊé• ‰∏çÈúÄË¶ÅÈáçÊñ∞ËøûÊé•.")
                QueryThen.bringInstance(msg: (str_dataName.replacingOccurrences(of: "to", with: "SO") + "ET Ê≠£" + String(str_modeContent)))
            }
            //: return
            return
        }

        //: self.connectUrlStr = urlStr
        self.connectUrlStr = urlStr

        //: var newStr = urlStr!
        var newStr = urlStr!
        //: if self.isTalking {
        if self.isTalking {
            //: newStr = newStr.appending("&resume=1")
            newStr = newStr.appending((String(str_burnTitle.suffix(4)) + "ume=1"))
        }
        //: newStr = newStr.appending("&lang=\(TalkingRequestAddrTool.share.interfaceLang)")
        newStr = newStr.appending((String(str_borderValue.prefix(6))) + "\(DoingAddrTool.share.interfaceLang)")
        //: closeWebSocket(userLoginOut: false)
        approximateMatchOut(userLoginOut: false)

        //: let url = URL(string: newStr)
        let url = URL(string: newStr)
        //: var request = URLRequest(url: url!)
        var request = URLRequest(url: url!)
        //: request.timeoutInterval = SOCKET_MANAGER_CONNECT_TIMEOUT
        request.timeoutInterval = kLet_seatBarValue
        //: self.webSocket = SRWebSocket(urlRequest: request)
        self.webSocket = SRWebSocket(urlRequest: request)
        //: self.webSocket?.delegate = self
        self.webSocket?.delegate = self
        //: self.webSocket?.open()
        self.webSocket?.open()
        //: UploadLogTool.writeLog(msg: "SOCKET ÂºÄÂßãËøûÊé•, Âú∞ÂùÄÔºö\(newStr).")
        QueryThen.bringInstance(msg: (str_modelValue.replacingOccurrences(of: "of", with: "KE") + String(str_aspectText)) + "\(newStr).")
    }

    /// ÂèëÈÄÅÊ∂àÊÅØ
    /// - Parameter info: Ê∂àÊÅØ‰Ωì
    /// - Returns: ÂèëÈÄÅÁªìÊûú
    //: @discardableResult
    @discardableResult
    //: func sendMessage(info: [String: Any]?) -> Bool {
    func demonstrateInfo(info: [String: Any]?) -> Bool {
        //: guard info != nil else { return false }
        guard info != nil else { return false }

        // 1. Âà§Êñ≠ÊòØÂê¶ÊúâÁΩëÁªúËøûÊé•
        //: if WithAdministratorAppManager.share.reachability?.connection == nil || WithAdministratorAppManager.share.reachability?.connection == .unavailable {
        if WithAdministratorAppManager.share.reachability?.connection == nil || WithAdministratorAppManager.share.reachability?.connection == .unavailable {
            //: let info: [String: Any] = ["cmd": "onNetDisabled",
            let info: [String: Any] = [(String(str_viewText)): (String(str_objectLabelValue) + String(str_addGenderData)),
                                       //: "errno": "\(SOCKET_WITHOUT_NET_CODE)",
                                       (String(str_qualityClickValue)): "\(kLet_ageValue)",
                                       //: "data": [:]]
                                       (str_pickName.replacingOccurrences(of: "container", with: "a")): [:]]
            //: let data = try? JSONSerialization.data(withJSONObject: info, options: [])
            let data = try? JSONSerialization.data(withJSONObject: info, options: [])
            //: let message = String(data: data!, encoding: String.Encoding.utf8)
            let message = String(data: data!, encoding: String.Encoding.utf8)
            //: handleReceiveMessage(message: message)
            handleOn(message: message)
            //: return false
            return false
        }

        // 2. Â∞ùËØïÂèëÈÄÅÊ∂àÊÅØ
        //: if self.webSocket?.readyState == SRReadyState.OPEN {
        if self.webSocket?.readyState == SRReadyState.OPEN {
            //: let data = try? JSONSerialization.data(withJSONObject: info!, options: [])
            let data = try? JSONSerialization.data(withJSONObject: info!, options: [])
            //: let message = String(data: data!, encoding: String.Encoding.utf8)
            let message = String(data: data!, encoding: String.Encoding.utf8)
            //: if info!["cmd"] as? String == "ping" {
            if info![(String(str_viewText))] as? String == (String(str_modeTitle)) {
                //: UploadLogTool.writeLog(msg: "SOCKET ËøûÊé•‰øùÊ¥ªcmd: ping.")
                QueryThen.bringInstance(msg: (str_frameFollowingContent.replacingOccurrences(of: "you", with: "C") + "ET \u{8fde}Êé•‰øù" + String(str_cellEqualToName.suffix(7)) + String(str_dataSharedValue.suffix(4))))
                //: } else if info!["cmd"] as? String == "callHeartbeat" {
            } else if info![(String(str_viewText))] as? String == (String(str_modelData)) {
                //: UploadLogTool.writeLog(msg: "SOCKET trtc‰øùÊ¥ªcmd: callHeartbeat.")
                QueryThen.bringInstance(msg: String(bytes: str_errorName.reversed(), encoding: .utf8)!)
                //: } else if info!["cmd"] as? String == "liveHeartBeat" {
            } else if info![(String(str_viewText))] as? String == (String(str_tipLabelName)) {
                //: UploadLogTool.writeLog(msg: "SOCKET live‰øùÊ¥ªcmd: liveHeartBeat.")
                QueryThen.bringInstance(msg: String(bytes: str_equalMakeText.map{errorEqual(value: $0)}, encoding: .utf8)!)
            }
            //: self.webSocket?.send(message)
            self.webSocket?.send(message)
            //: return true
            return true

            //: } else {
        } else {
            //: if info!["cmd"] as? String == "ping" {
            if info![(String(str_viewText))] as? String == (String(str_modeTitle)) {
                //: let info: [String: Any] = ["cmd": "onP",
                let info: [String: Any] = [(String(str_viewText)): (String(str_nearPushValue)),
                                           //: "errno": "\(SOCKET_MANAGER_UNCONNECTED_CODE)",
                                           (String(str_qualityClickValue)): "\(kLet_userData)",
                                           //: "data": [:]]
                                           (str_pickName.replacingOccurrences(of: "container", with: "a")): [:]]
                //: let data = try? JSONSerialization.data(withJSONObject: info, options: [])
                let data = try? JSONSerialization.data(withJSONObject: info, options: [])
                //: let message = String(data: data!, encoding: String.Encoding.utf8)
                let message = String(data: data!, encoding: String.Encoding.utf8)
                //: handleReceiveMessage(message: message)
                handleOn(message: message)
            }
            //: self.reconnectWebSocket(timeInterval: 5.0, type: .SocketSendMsg)
            self.labelType(timeInterval: 5.0, type: .SocketSendMsg)
            //: return false
            return false
        }
    }

    /// Â§ÑÁêÜÊé•Êî∂Âà∞ÁöÑÊ∂àÊÅØ
    /// - Parameter message: Ê∂àÊÅØ‰Ωì
    //: private func handleReceiveMessage(message: String?) {
    private func handleOn(message: String?) {
        //: guard message != nil else { return }
        guard message != nil else { return }

        //: let json = JSON(parseJSON: message!)
        let json = JSON(parseJSON: message!)
        //: let cmdName = json["cmd"].stringValue
        let cmdName = json[(String(str_viewText))].stringValue
        //: let errorNo = json["errno"].intValue
        let errorNo = json[(String(str_qualityClickValue))].intValue
        //: let msg = json["msg"].stringValue
        let msg = json[(str_tableLikeName.replacingOccurrences(of: "app", with: "s"))].stringValue
        //: let data = json["data"].dictionaryObject ?? [:]
        let data = json[(str_pickName.replacingOccurrences(of: "container", with: "a"))].dictionaryObject ?? [:]

        //: printLog(message: "üîó Â§ÑÁêÜÊ∂àÊÅØÔºöcmdName:\(cmdName), errNo:\(errorNo), msg:\(msg), data:\(data)")
        printLog(message: (String(str_toSessionValue) + String(str_managerTitle)) + "\(cmdName)" + (String(str_imageData.prefix(6)) + String(str_textValue.prefix(2))) + "\(errorNo)" + (String(str_noticeValue.prefix(6))) + "\(msg)" + (String(str_fileProgressData)) + "\(data)")

        // Ê£ÄÊµãÊòØÂê¶ÈúÄË¶ÅÊÅ¢Â§çÁõ¥Êí≠
        //: check_stopOrRestoreLive(cmdName)
        eugene(cmdName)

        // Â§ÑÁêÜÂºÇÂ∏∏
        //: guard errorNo == 0 else {
        guard errorNo == 0 else {
            //: UploadLogTool.writeLog(msg: "SOCKET Êé•Êî∂ÂºÇÂ∏∏Ê∂àÊÅØÔºöcmdName:\(cmdName), errNo:\(errorNo), msg:\(msg), data:\(data).")
            QueryThen.bringInstance(msg: (String(str_makeVideoLabelName) + String(str_emptyGiftText) + String(str_videoValue)) + "\(cmdName)" + (String(str_imageData.prefix(6)) + String(str_textValue.prefix(2))) + "\(errorNo)" + (String(str_noticeValue.prefix(6))) + "\(msg)" + (String(str_fileProgressData)) + "\(data).")
            //: if errorNo == 444 {
            if errorNo == 444 {
                //: WithAdministratorAppManager.share.loginUserMode.freeCallTimes = 0
                WithAdministratorAppManager.share.loginUserMode.freeCallTimes = 0
                //: } else if errorNo == 60003, !WithAdministratorAppManager.share.loginUserMode.isNaUser {
            } else if errorNo == 60003, !WithAdministratorAppManager.share.loginUserMode.isNaUser {
                /// Ê≤°Áúü‰∫∫ËÆ§ËØÅÊó∂ÔºåÈúÄË¶ÅÂºπÁ™óÊèêÁ§∫
                //: TalkingPopupWindowManager.shared.faceVerificationPopUpWindow()
                ShowWindowManager.shared.mObjectDetail()
                //: return
                return
            }
            //: self.errorDelegate?.socket_didRecieveError(errorNo: errorNo, cmd: cmdName, msg: msg, data: data)
            self.errorDelegate?.number1(errorNo: errorNo, cmd: cmdName, msg: msg, data: data)
            //: return
            return
        }

        // Â§ÑÁêÜÊ≠£Â∏∏Êé•Êî∂ÁöÑÊ∂àÊÅØ
        //: if cmdName == "onReceivedGift" { // Á§ºÁâ©
        if cmdName == (String(str_bottomValue.prefix(4)) + str_levelValue.replacingOccurrences(of: "make", with: "e") + "dGift") { // Á§ºÁâ©
            //: NotificationCenter.default.post(name: USER_RECIEVED_GIFT_NOTIFICATION, object: data)
            NotificationCenter.default.post(name: kLet_screenTitle, object: data)

            //: } else if cmdName == "onVideoMatch" { // ËßÜÈ¢ëÈÄüÈÖç
        } else if cmdName == (String(str_toValue.suffix(3)) + String(str_listName.suffix(5)) + "atch") { // ËßÜÈ¢ëÈÄüÈÖç
            //: self.videoMatchDelegate?.socket_match_onVideoMatch(data: data)
            self.videoMatchDelegate?.discredit(data: data)

            //: } else if cmdName == "onRequestCall" { // Êã®ÊâìÊñπÂèëÂá∫requestCallÂõûÊâß
        } else if cmdName == (String(str_viewData) + String(str_appValue)) { // Êã®ÊâìÊñπÂèëÂá∫requestCallÂõûÊâß
            //: self.isCalling = true
            self.isCalling = true
            // ËßÜÈ¢ëÈÄüÈÖç || Èü≥ËßÜÈ¢ëÈÄöËØù
            //: self.videoMatchDelegate?.socket_match_onRequestCall(data: data)
            self.videoMatchDelegate?.giftCircle(data: data)

            //: } else if cmdName == "onCancelCall" { // Êã®ÊâìÊñπÂèëÂá∫cancelCallÂõûÊâßÔºåÁõÆÂâçÊó†ÈúÄÂ§ÑÁêÜ
        } else if cmdName == (String(str_windowName.suffix(5)) + "celCa" + str_kitMakeTitle.lowercased()) { // Êã®ÊâìÊñπÂèëÂá∫cancelCallÂõûÊâßÔºåÁõÆÂâçÊó†ÈúÄÂ§ÑÁêÜ
            //: } else if cmdName == "onRefuseCall" { // Êé•Êî∂ÊñπÂèëÈÄÅrefuseCallÂõûÊâßÔºåÁõÆÂâçÊó†ÈúÄÂ§ÑÁêÜ
        } else if cmdName == (String(str_colorTopData.prefix(3)) + String(str_nowTitle.prefix(9))) { // Êé•Êî∂ÊñπÂèëÈÄÅrefuseCallÂõûÊâßÔºåÁõÆÂâçÊó†ÈúÄÂ§ÑÁêÜ
            //: } else if cmdName == "onAcceptCall" { // Êé•Êî∂ÊñπÂèëÈÄÅacceptCallÂõûÊâß
        } else if cmdName == (String(str_loadRemoveName) + String(str_atValue)) { // Êé•Êî∂ÊñπÂèëÈÄÅacceptCallÂõûÊâß
            //: self.isTalking = true
            self.isTalking = true
            //: self.isCalling = false
            self.isCalling = false
            //: startTalkPing()
            supplement()
            //: self.calledPartyDelegate?.socket_videoChat_onAcceptCall(data: data)
            self.calledPartyDelegate?.designModel(data: data)

            //: } else if cmdName == "onStopCall" { // Êé•Êî∂ÊñπÂèëÈÄÅstopCallÂõûÊâß
        } else if cmdName == (String(str_taskData) + str_leadingData.replacingOccurrences(of: "toward", with: "l")) { // Êé•Êî∂ÊñπÂèëÈÄÅstopCallÂõûÊâß
            //: self.isTalking = false
            self.isTalking = false
            //: self.isCalling = false
            self.isCalling = false
            //: endTalkingPing()
            direct()
            //: if let freeCallTimes = data["freeCallTimes"] as? Int {
            if let freeCallTimes = data[(String(str_pleaseAttentionValue) + String(str_linkClickData))] as? Int {
                //: WithAdministratorAppManager.share.loginUserMode.freeCallTimes = freeCallTimes
                WithAdministratorAppManager.share.loginUserMode.freeCallTimes = freeCallTimes
            }
            // Êõ¥Êñ∞‰ΩôÈ¢ù
            //: WithAdministratorAppManager.share.loginUserMode.mf_coin = json["data"]["mfCoin"].stringValue
            WithAdministratorAppManager.share.loginUserMode.mf_coin = json[(str_pickName.replacingOccurrences(of: "container", with: "a"))][(String(str_smallContent))].stringValue
            //: NotificationCenter.default.post(name: VIDEOCALL_END_CLOSEDISCOUNTS_NOTIFICATION, object: nil)
            NotificationCenter.default.post(name: kLet_errorName, object: nil)
            //: self.isFreeCall = false
            self.isFreeCall = false
            //: (TalkingApplication.shared as! TalkingApplication).femaleBusyStatusReport()
            (ShouldKingfisherCompatible.shared as! ShouldKingfisherCompatible).femaleSection()
            //: } else if cmdName == "onMissCoin" { // ‰ΩôÈ¢ù‰∏çË∂≥ÊèêÈÜí
        } else if cmdName == (String(str_marginPhoneValue.prefix(6)) + "Coin") { // ‰ΩôÈ¢ù‰∏çË∂≥ÊèêÈÜí
            //: self.callerDelegate?.socket_videoChat_onMissCoin(msg: msg, data: data)
            self.callerDelegate?.star(msg: msg, data: data)

            //: } else if cmdName == "acceptCall" { // Êé•Êî∂ÊñπÊé•Âèó‰∫ÜÊù•ÁîµÔºåÊîπÂèòÁä∂ÊÄÅ‰∏∫ÈÄöËØù‰∏≠,ÂºÄÂßãÊé®ÊãâÊµÅ
        } else if cmdName == (str_equalText.replacingOccurrences(of: "model", with: "a") + "tCall") { // Êé•Êî∂ÊñπÊé•Âèó‰∫ÜÊù•ÁîµÔºåÊîπÂèòÁä∂ÊÄÅ‰∏∫ÈÄöËØù‰∏≠,ÂºÄÂßãÊé®ÊãâÊµÅ
            //: self.isTalking = true
            self.isTalking = true
            //: self.isCalling = false
            self.isCalling = false
            //: startTalkPing()
            supplement()
            //: self.callerDelegate?.socket_videoChat_acceptCall(data: data)
            self.callerDelegate?.callArray(data: data)

            //: } else if cmdName == "stopCall" { // Êé•Êî∂Êñπ/Êã®ÊâìÊñπ ÊåÇÊñ≠‰∫ÜÈÄöËØù
        } else if cmdName == (str_leadingName.replacingOccurrences(of: "start", with: "s") + String(str_actualData.suffix(7))) { // Êé•Êî∂Êñπ/Êã®ÊâìÊñπ ÊåÇÊñ≠‰∫ÜÈÄöËØù
            //: self.isTalking = false
            self.isTalking = false
            //: self.isCalling = false
            self.isCalling = false
            //: endTalkingPing()
            direct()
            //: self.callerDelegate?.socket_videoChat_stopCall(data: data)
            self.callerDelegate?.backgroundTo(data: data)
            // Êõ¥Êñ∞‰ΩôÈ¢ù
            //: WithAdministratorAppManager.share.loginUserMode.mf_coin = json["data"]["mfCoin"].stringValue
            WithAdministratorAppManager.share.loginUserMode.mf_coin = json[(str_pickName.replacingOccurrences(of: "container", with: "a"))][(String(str_smallContent))].stringValue

            //: isShowFreeStopCallPopUpView(data: data)
            disassembleSearched(data: data)
            //: NotificationCenter.default.post(name: VIDEOCALL_END_CLOSEDISCOUNTS_NOTIFICATION, object: nil)
            NotificationCenter.default.post(name: kLet_errorName, object: nil)
            //: self.isFreeCall = false
            self.isFreeCall = false
            //: (TalkingApplication.shared as! TalkingApplication).femaleBusyStatusReport()
            (ShouldKingfisherCompatible.shared as! ShouldKingfisherCompatible).femaleSection()
            //: } else if cmdName == "requestCall" { // Êé•Êî∂ÊñπÊî∂Âà∞‰∫ÜÊã®ÊâìÊñπÁöÑÁî≥ËØ∑ÈÄöËØù
        } else if cmdName == (str_contentTitle.replacingOccurrences(of: "row", with: "e") + String(str_nearData)) { // Êé•Êî∂ÊñπÊî∂Âà∞‰∫ÜÊã®ÊâìÊñπÁöÑÁî≥ËØ∑ÈÄöËØù
            //: self.isCalling = true
            self.isCalling = true
            // ÂèëÈÄÅÈÄöÁü•ÔºåÂëäÁü•Â§ñÁïåÂ§ÑÁêÜÈÄªËæë
            //: NotificationCenter.default.post(name: SOCKET_VIDEOCHAT_REQUESTCALL_NOTIFICATION, object: self)
            NotificationCenter.default.post(name: kLet_succeedTitle, object: self)

            //: if UIApplication.shared.applicationState != .background {
            if UIApplication.shared.applicationState != .background { // Â∫îÁî®Âú®ÂâçÂè∞
                //: WithAdministratorAppManager.share.recieve1v1TalkRequest(info: data)
                WithAdministratorAppManager.share.becomeCall(info: data)
                //: } else {
            } else {
                //: self.cancelCall = false
                self.cancelCall = false
                //: self.unHandleCallData = data
                self.unHandleCallData = data
                //: self.unHandleCallData?["recievedDate"] = Date()
                self.unHandleCallData?[(String(str_resignText) + String(str_inputValue.prefix(4)))] = Date()

                // Â∫îÁî®Âú®ÂêéÂè∞ÔºåÂèëÈÄÅÊú¨Âú∞Êé®ÈÄÅÂëäÁü•Áî®Êà∑
                //: var body = "[Invite you to a video call...]".localized
                var body = String(bytes: str_contentSizeData.reversed(), encoding: .utf8)!.localized
                //: if json["data"]["type"].intValue == 1 { // Èü≥È¢ë
                if json[(str_pickName.replacingOccurrences(of: "container", with: "a"))][(String(str_subShareValue))].intValue == 1 { // Èü≥È¢ë
                    //: body = "[Invite you to a voice call...]".localized
                    body = String(bytes: str_bottomTheValue.map{modelNo(progress: $0)}, encoding: .utf8)!.localized
                }
                //: AppDelegateHelper.pushLocalNotification(uid: String(json["data"]["uid"].intValue),
                ButtonDelegateHelper.semipublicSledge(uid: String(json[(str_pickName.replacingOccurrences(of: "container", with: "a"))][(String(str_saveName))].intValue),
                                                   //: title: data["nickname"] as? String,
                                                   title: data[(String(str_makeData) + str_sizeLiveValue.replacingOccurrences(of: "tab", with: "e"))] as? String,
                                                   //: body: body,
                                                   body: body,
                                                   //: imageUrl: data["headPic"] as? String)
                                                   imageUrl: data[(String(str_directionName) + String(str_requestData.prefix(6)))] as? String)
                // Êí≠ÊîæÊù•ÁîµÈü≥‰πê
                //: AppDelegateHelper.shared.startPlayBGM()
                ButtonDelegateHelper.shared.sizeBgm()
            }

            //: } else if cmdName == "onCallResume" { // Êé•Êî∂Êñπ/ÂèëÈÄÅÊñπ ÊÅ¢Â§çÈÄöËØù‰∏≠ÁöÑÈ°µÈù¢ÔºåÂπ∂ÂºÄÂßãÊé®ÊãâÊµÅ
        } else if cmdName == (String(str_normalValue.prefix(6)) + String(str_liveValue.suffix(6))) { // Êé•Êî∂Êñπ/ÂèëÈÄÅÊñπ ÊÅ¢Â§çÈÄöËØù‰∏≠ÁöÑÈ°µÈù¢ÔºåÂπ∂ÂºÄÂßãÊé®ÊãâÊµÅ
            //: self.isTalking = true
            self.isTalking = true
            //: self.isCalling = false
            self.isCalling = false
            //: startTalkPing()
            supplement()

            //: var resumeData = data
            var resumeData = data
            //: resumeData["onCallResume"] = "1"
            resumeData[(String(str_normalValue.prefix(6)) + String(str_liveValue.suffix(6)))] = "1"
            //: WithAdministratorAppManager.share.recieve1v1TalkResumeRequest(info: resumeData)
            WithAdministratorAppManager.share.mark(info: resumeData)
            //: (TalkingApplication.shared as! TalkingApplication).destroyTimer()
            (ShouldKingfisherCompatible.shared as! ShouldKingfisherCompatible).fullMoon()

            //: } else if cmdName == "cancelCall" { // Êã®ÊâìÊñπÊãíÁªù‰∫ÜÈÄöËØùÔºåÊé•Êî∂ÊñπÊî∂Âà∞ËØ•Êåá‰ª§
        } else if cmdName == (str_equalPlayerData.replacingOccurrences(of: "table", with: "nc") + "Call") { // Êã®ÊâìÊñπÊãíÁªù‰∫ÜÈÄöËØùÔºåÊé•Êî∂ÊñπÊî∂Âà∞ËØ•Êåá‰ª§
            //: self.isTalking = false
            self.isTalking = false
            //: self.isCalling = false
            self.isCalling = false
            //: self.cancelCall = true
            self.cancelCall = true
            //: self.isFreeCall = false
            self.isFreeCall = false
            //: endTalkingPing()
            direct()
            //: self.callerDelegate?.socket_videoChat_cancelCall(data: data)
            self.callerDelegate?.fileNameMode(data: data)
            // Â∫îÁî®Âú®ÂêéÂè∞
            //: if UIApplication.shared.applicationState == .background {
            if UIApplication.shared.applicationState == .background {
                // ÁßªÈô§Êù•ÁîµÊú¨Âú∞Êé®ÈÄÅ
                //: AppDelegateHelper.local_removeDeliveredNotification(identifier: String(json["data"]["uid"].intValue))
                ButtonDelegateHelper.brandTitleIdentifier(identifier: String(json[(str_pickName.replacingOccurrences(of: "container", with: "a"))][(String(str_saveName))].intValue))
                // ÂÅúÊ≠¢Êí≠ÊîæÊù•ÁîµÈü≥‰πê
                //: AppDelegateHelper.shared.stopPlayBGM()
                ButtonDelegateHelper.shared.playArray()
            }

            //: } else if cmdName == "refuseCall" { // Êé•Êî∂ÊñπÊãíÁªù‰∫ÜÈÄöËØùÔºåÊã®ÊâìÊñπÊî∂Âà∞ËØ•Êåá‰ª§
        } else if cmdName == (String(str_firstData)) { // Êé•Êî∂ÊñπÊãíÁªù‰∫ÜÈÄöËØùÔºåÊã®ÊâìÊñπÊî∂Âà∞ËØ•Êåá‰ª§
            //: self.isTalking = false
            self.isTalking = false
            //: self.isCalling = false
            self.isCalling = false
            //: self.isFreeCall = false
            self.isFreeCall = false
            //: endTalkingPing()
            direct()
            //: self.calledPartyDelegate?.socket_videoChat_refuseCall(data: data)
            self.calledPartyDelegate?.noneFileShow(data: data)

            //: } else if cmdName == "onCallMotivation" { // Â•≥ÊÄßÈÄöËØùÊî∂Âà∞ÁöÑÁßØÂàÜÔºàÁî®‰∫éÂ±ïÁ§∫ËµöÈí±ÊøÄÂä±Âä®ÊïàÔºâ
        } else if cmdName == (String(str_tagData) + String(str_viewImageName.suffix(6)) + "vation") { // Â•≥ÊÄßÈÄöËØùÊî∂Âà∞ÁöÑÁßØÂàÜÔºàÁî®‰∫éÂ±ïÁ§∫ËµöÈí±ÊøÄÂä±Âä®ÊïàÔºâ
            //: if WithAdministratorAppManager.share.loginUserMode.sex == Gender.female.rawValue {
            if WithAdministratorAppManager.share.loginUserMode.sex == MiniSubqueryConvertible.female.rawValue {
                //: self.calledPartyDelegate?.socket_videoChat_onCallMotivation?(data: data)
                self.calledPartyDelegate?.socketToData?(data: data)
            }

            //: } else if cmdName == "onLiveWarning" { // Áõ¥Êí≠ËøùËßÑË≠¶Âëä
        } else if cmdName == (str_countName.replacingOccurrences(of: "identity", with: "n") + String(str_insideTitle.suffix(4)) + "Warning") { // Áõ¥Êí≠ËøùËßÑË≠¶Âëä
            //: TalkingLiveManager.live_showWarningView(content: msg, reason: json["data"]["reason"].stringValue, time: json["data"]["time"].stringValue)
            SectionPushListener.alarmismChannel(content: msg, reason: json[(str_pickName.replacingOccurrences(of: "container", with: "a"))][(str_editData.replacingOccurrences(of: "shared", with: "r") + str_progressName.replacingOccurrences(of: "observer", with: "n"))].stringValue, time: json[(str_pickName.replacingOccurrences(of: "container", with: "a"))][(String(str_listLayValue))].stringValue)

            //: } else if cmdName == "onStopLive" { // ÂÅúÊ≠¢Áõ¥Êí≠
        } else if cmdName == (String(str_fromCellValue.prefix(6)) + "Live") { // ÂÅúÊ≠¢Áõ¥Êí≠
            //: TalkingLiveManager.shared().live_releaseAllResource()
            SectionPushListener.cover().toResource()

            //: } else if cmdName == "onSendProgramGift" { // ËßÜÈ¢ëÈÄöËØùËäÇÁõÆÈÄÅÁ§ºÊàêÂäütost
        } else if cmdName == (String(str_addText.prefix(6)) + String(str_beanValue.suffix(5)) + "amGift") { // ËßÜÈ¢ëÈÄöËØùËäÇÁõÆÈÄÅÁ§ºÊàêÂäütost
            //: self.func__showStatusBarSuccessMsg(showMsg: msg)
            self.successMsg(showMsg: msg)

            //: } else if cmdName == "onGameFs" { // Ê∏∏Êàè‰∏≠Â•ñÈ£òÂ±è
        } else if cmdName == (String(str_resultText)) { // Ê∏∏Êàè‰∏≠Â•ñÈ£òÂ±è
            //: let broadStatus = data["broadStatus"] as? Int ?? -1
            let broadStatus = data[(str_kitName.lowercased() + str_titleValue.replacingOccurrences(of: "input", with: "r") + "Status")] as? Int ?? -1
            //: if WithAdministratorAppManager.share.appStatus == AppSkinStatus.normal.rawValue {
            if WithAdministratorAppManager.share.appStatus == SectionFreckleTextConvertible.normal.rawValue {
                //: if broadStatus == 1 {
                if broadStatus == 1 {
                    //: NotificationCenter.default.post(name: RECIVE_FLOATSCREEN_NOTIFICATION, object: self, userInfo: data)
                    NotificationCenter.default.post(name: kLet_groupValue, object: self, userInfo: data)
                    //: NotificationCenter.default.post(name: USER_RECIEVED_GIFT_NOTIFICATION, object: data)
                    NotificationCenter.default.post(name: kLet_screenTitle, object: data)
                    //: } else if broadStatus == -1 {
                } else if broadStatus == -1 {
                    //: NotificationCenter.default.post(name: RECIVE_FLOATSCREEN_NOTIFICATION, object: self, userInfo: data)
                    NotificationCenter.default.post(name: kLet_groupValue, object: self, userInfo: data)
                }
            }

            //: } else if cmdName == "onCallChatMsg" { // Êî∂Âà∞ËßÜÈ¢ëÈÄöËØù‰∏≠ÁöÑËÅäÂ§©Ê∂àÊÅØ
        } else if cmdName == (String(str_iconValue)) { // Êî∂Âà∞ËßÜÈ¢ëÈÄöËØù‰∏≠ÁöÑËÅäÂ§©Ê∂àÊÅØ
            //: TalkingVideoDanmuManager.shared().onRecvDanmuNewMsg(msg: data)
            SubmitMediaThen.toIcon().addMsg(msg: data)

            //: } else if cmdName == "onNotificationPopupWin" { // ÂÆ°Ê†∏ÊãíÁªùÊèêÁ§∫ÂºπÁ™ó
        } else if cmdName == (String(str_cameraModeContent.suffix(5)) + "ific" + str_statusTitle.replacingOccurrences(of: "color", with: "o") + "nPopupWin") { // ÂÆ°Ê†∏ÊãíÁªùÊèêÁ§∫ÂºπÁ™ó
            //: TalkingPopupWindowManager.shared.attestationRefusePopUpWindow(dic: data)
            ShowWindowManager.shared.sizeData(dic: data)

            //: } else if cmdName == "onUserBlock" { // Áî®Êà∑Ë¢´Â∞ÅÂè∑
        } else if cmdName == (String(str_whiteText.suffix(4)) + "erBl" + str_topData.lowercased()) { // Áî®Êà∑Ë¢´Â∞ÅÂè∑
            //: TalkingLiveManager.shared().live_releaseAllResource()
            SectionPushListener.cover().toResource()
            //: TalkingVoiceRoomManager.shared().voiceRoom_releaseAllResource()
            StackMThen.estimated().chemistryLabResource()
            //: NotificationCenter.default.post(name: DID_LOGIN_OUT_SUCCESS_NOTIFICATION, object: nil, userInfo: nil)
            NotificationCenter.default.post(name: kLet_useTitle, object: nil, userInfo: nil)
        }
    }
}

// MARK: - Â§ÑÁêÜ‰∏öÂä°ÈÄªËæë

//: extension TalkingSocketManager {
extension DataSocketDelegate {
    /// Ê£ÄÊµãÊòØÂê¶ÈúÄË¶ÅÂÅúÊ≠¢ÊàñÊÅ¢Â§çÁõ¥Êí≠
    /// - Parameter cmdName: socketÂëΩ‰ª§
    //: private func check_stopOrRestoreLive(_ cmdName: String) {
    private func eugene(_ cmdName: String) {
        // „ÄêÂÖ≥Èó≠Áõ¥Êí≠„ÄëÊî∂Âà∞Êù•ÁîµÊàñ‰∏ªÂä®ÈÄöËØùÊó∂ÔºåÂÖ≥Èó≠Áõ¥Êí≠
        //: if cmdName == "requestCall" || cmdName == "onRequestCall" {
        if cmdName == (str_contentTitle.replacingOccurrences(of: "row", with: "e") + String(str_nearData)) || cmdName == (String(str_viewData) + String(str_appValue)) {
            //: if TalkingLiveManager.shared().isLive == true {
            if SectionPushListener.cover().isLive == true {
                //: NEED_RESTORE_LIVE = true
                kLet_userName = true
                //: TalkingLiveManager.req_liveStop(type: 3)
                SectionPushListener.labOpen(type: 3)
                //: TalkingLiveManager.shared().live_releaseAllResource()
                SectionPushListener.cover().toResource()
                //: return
                return
            }
        }

        // „ÄêÊÅ¢Â§çÁõ¥Êí≠„ÄëÁªìÊùüÈÄöËØùÂêéÔºåÂà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÊÅ¢Â§çÁõ¥Êí≠
        //: guard NEED_RESTORE_LIVE == true else { return }
        guard kLet_userName == true else { return }
        //: if cmdName == "cancelCall" || cmdName == "onCancelCall" ||
        if cmdName == (str_equalPlayerData.replacingOccurrences(of: "table", with: "nc") + "Call") || cmdName == (String(str_windowName.suffix(5)) + "celCa" + str_kitMakeTitle.lowercased()) ||
            //: cmdName == "refuseCall" || cmdName == "onRefuseCall" ||
            cmdName == (String(str_firstData)) || cmdName == (String(str_colorTopData.prefix(3)) + String(str_nowTitle.prefix(9))) ||
            //: cmdName == "stopCall" || cmdName == "onStopCall" {
            cmdName == (str_leadingName.replacingOccurrences(of: "start", with: "s") + String(str_actualData.suffix(7))) || cmdName == (String(str_taskData) + str_leadingData.replacingOccurrences(of: "toward", with: "l"))
        {
            //: NEED_RESTORE_LIVE = false
            kLet_userName = false
            //: let alert = TalkingLiveAlertView(frame: .zero, type: .turnOnLive)
            let alert = ShouldThen(frame: .zero, type: .turnOnLive)
            //: alert.rightBlcok = {
            alert.rightBlcok = {
                //: TalkingLiveManager.shared().checkLiveAuthAndTurnOn()
                SectionPushListener.cover().talkHandler()
            }
            //: alert.show()
            alert.afterwardCeremony()
        }
    }

    /// ÂÖçË¥π1ÂàÜÈíüÈÄöËØùÁªìÊùüÂºπÁ™ó
    //: private func isShowFreeStopCallPopUpView(data: [String: Any]) {
    private func disassembleSearched(data: [String: Any]) {
        //: if let freeCallTimes = data["freeCallTimes"] as? Int {
        if let freeCallTimes = data[(String(str_pleaseAttentionValue) + String(str_linkClickData))] as? Int {
            //: WithAdministratorAppManager.share.loginUserMode.freeCallTimes = freeCallTimes
            WithAdministratorAppManager.share.loginUserMode.freeCallTimes = freeCallTimes
        }
        //: let freeCallWin = data["freeCallWin"] as? Bool
        let freeCallWin = data[(String(str_backgroundTextLayerName.suffix(6)) + String(str_userRequestTopValue))] as? Bool
        //: if freeCallWin == true && WithAdministratorAppManager.share.loginUserMode.sex == Gender.male.rawValue {
        if freeCallWin == true, WithAdministratorAppManager.share.loginUserMode.sex == MiniSubqueryConvertible.male.rawValue {
            //: let view = TalkingFreeStopCallPopUpView.init()
            let view = CellEmptyErrorDelegate()
            //: view.show()
            view.atItem()
            //: view.setShowData(data: data)
            view.pathData(data: data)
        }
    }
}
